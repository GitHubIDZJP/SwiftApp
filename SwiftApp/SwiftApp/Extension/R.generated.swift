//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
//import Rswift
import RswiftResources
import RxSwift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 2 properties.
  struct entitlements {
    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    struct comAppleDeveloperAssociatedDomains {
      static let applinksWwwItianliaoCom = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:www.itianliao.com") ?? "applinks:www.itianliao.com"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 13 files.
  struct file {
    /// Resource file `LICENSE`.
    static let licensE = Rswift.FileResource(bundle: R.hostingBundle, name: "LICENSE", pathExtension: "")
    /// Resource file `MJRefresh.bundle`.
    static let mjRefreshBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "MJRefresh", pathExtension: "bundle")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `Resources.bundle`.
    static let resourcesBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Resources", pathExtension: "bundle")
    /// Resource file `apple-app-site-association`.
    static let appleAppSiteAssociation = Rswift.FileResource(bundle: R.hostingBundle, name: "apple-app-site-association", pathExtension: "")
    /// Resource file `home_chat_group_icon.gif`.
    static let home_chat_group_iconGif = Rswift.FileResource(bundle: R.hostingBundle, name: "home_chat_group_icon", pathExtension: "gif")
    /// Resource file `living.json`.
    static let livingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "living", pathExtension: "json")
    /// Resource file `load_fresh.gif`.
    static let load_freshGif = Rswift.FileResource(bundle: R.hostingBundle, name: "load_fresh", pathExtension: "gif")
    /// Resource file `loading_animation.json`.
    static let loading_animationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "loading_animation", pathExtension: "json")
    /// Resource file `message.wav`.
    static let messageWav = Rswift.FileResource(bundle: R.hostingBundle, name: "message", pathExtension: "wav")
    /// Resource file `refresh.json`.
    static let refreshJson = Rswift.FileResource(bundle: R.hostingBundle, name: "refresh", pathExtension: "json")
    /// Resource file `tian_liao_load.gif`.
    static let tian_liao_loadGif = Rswift.FileResource(bundle: R.hostingBundle, name: "tian_liao_load", pathExtension: "gif")
    /// Resource file `voice_room_load.gif`.
    static let voice_room_loadGif = Rswift.FileResource(bundle: R.hostingBundle, name: "voice_room_load", pathExtension: "gif")

    /// `bundle.url(forResource: "LICENSE", withExtension: "")`
    static func licensE(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licensE
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MJRefresh", withExtension: "bundle")`
    static func mjRefreshBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mjRefreshBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Resources", withExtension: "bundle")`
    static func resourcesBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.resourcesBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "apple-app-site-association", withExtension: "")`
    static func appleAppSiteAssociation(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.appleAppSiteAssociation
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "home_chat_group_icon", withExtension: "gif")`
    static func home_chat_group_iconGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.home_chat_group_iconGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "living", withExtension: "json")`
    static func livingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.livingJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "load_fresh", withExtension: "gif")`
    static func load_freshGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.load_freshGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading_animation", withExtension: "json")`
    static func loading_animationJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading_animationJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "message", withExtension: "wav")`
    static func messageWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.messageWav
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "refresh", withExtension: "json")`
    static func refreshJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.refreshJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tian_liao_load", withExtension: "gif")`
    static func tian_liao_loadGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tian_liao_loadGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "voice_room_load", withExtension: "gif")`
    static func voice_room_loadGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.voice_room_loadGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 247 images.
  struct image {
    /// Image `TL_BG`.
    static let tl_BG = Rswift.ImageResource(bundle: R.hostingBundle, name: "TL_BG")
    /// Image `age_period_icon`.
    static let age_period_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "age_period_icon")
    /// Image `arrow_right_least_gray`.
    static let arrow_right_least_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_right_least_gray")
    /// Image `arrow_right_least_white`.
    static let arrow_right_least_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_right_least_white")
    /// Image `arrow_right_small_gray`.
    static let arrow_right_small_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_right_small_gray")
    /// Image `arrow_right_small_white`.
    static let arrow_right_small_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_right_small_white")
    /// Image `cart_check_down`.
    static let cart_check_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart_check_down")
    /// Image `cart_check`.
    static let cart_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart_check")
    /// Image `chat_to_bg_green`.
    static let chat_to_bg_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_to_bg_green")
    /// Image `chat_to_bg_red`.
    static let chat_to_bg_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_to_bg_red")
    /// Image `chat_to_bg_yellow`.
    static let chat_to_bg_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_to_bg_yellow")
    /// Image `constellation_icon`.
    static let constellation_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "constellation_icon")
    /// Image `creat_chat_room_back`.
    static let creat_chat_room_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "creat_chat_room_back")
    /// Image `friend_add`.
    static let friend_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "friend_add")
    /// Image `friend_fans`.
    static let friend_fans = Rswift.ImageResource(bundle: R.hostingBundle, name: "friend_fans")
    /// Image `friend_follow`.
    static let friend_follow = Rswift.ImageResource(bundle: R.hostingBundle, name: "friend_follow")
    /// Image `friend_footmark`.
    static let friend_footmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "friend_footmark")
    /// Image `friend_mutual`.
    static let friend_mutual = Rswift.ImageResource(bundle: R.hostingBundle, name: "friend_mutual")
    /// Image `friend_serach_gray`.
    static let friend_serach_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "friend_serach_gray")
    /// Image `home_allFollow_close`.
    static let home_allFollow_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_allFollow_close")
    /// Image `home_arrow_black_down`.
    static let home_arrow_black_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_arrow_black_down")
    /// Image `home_chat_add`.
    static let home_chat_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_chat_add")
    /// Image `home_chat_detail`.
    static let home_chat_detail = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_chat_detail")
    /// Image `home_chat_group_icon.gif`.
    static let home_chat_group_iconGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_chat_group_icon.gif")
    /// Image `home_chat_icon_white`.
    static let home_chat_icon_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_chat_icon_white")
    /// Image `home_chat_number`.
    static let home_chat_number = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_chat_number")
    /// Image `home_chat_redPacket`.
    static let home_chat_redPacket = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_chat_redPacket")
    /// Image `home_detail_privateChat`.
    static let home_detail_privateChat = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_detail_privateChat")
    /// Image `home_navi_right_living`.
    static let home_navi_right_living = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_navi_right_living")
    /// Image `home_online_icon`.
    static let home_online_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_online_icon")
    /// Image `home_pop_redView`.
    static let home_pop_redView = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_pop_redView")
    /// Image `home_privateChat`.
    static let home_privateChat = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_privateChat")
    /// Image `home_private_item_bg`.
    static let home_private_item_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_private_item_bg")
    /// Image `home_redBug_back`.
    static let home_redBug_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_redBug_back")
    /// Image `home_redBug_coin`.
    static let home_redBug_coin = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_redBug_coin")
    /// Image `home_redBug_red`.
    static let home_redBug_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_redBug_red")
    /// Image `home_share_copy`.
    static let home_share_copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_share_copy")
    /// Image `home_share_delete`.
    static let home_share_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_share_delete")
    /// Image `home_share_dislike`.
    static let home_share_dislike = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_share_dislike")
    /// Image `home_share_friendsCircle`.
    static let home_share_friendsCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_share_friendsCircle")
    /// Image `home_share_inform`.
    static let home_share_inform = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_share_inform")
    /// Image `home_share_vxFriends`.
    static let home_share_vxFriends = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_share_vxFriends")
    /// Image `ic_add_blacklist`.
    static let ic_add_blacklist = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_blacklist")
    /// Image `ic_affiche_back`.
    static let ic_affiche_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_affiche_back")
    /// Image `ic_billing_recharge`.
    static let ic_billing_recharge = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_billing_recharge")
    /// Image `ic_btn_back_ground_orange`.
    static let ic_btn_back_ground_orange = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_btn_back_ground_orange")
    /// Image `ic_cancel_small`.
    static let ic_cancel_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cancel_small")
    /// Image `ic_creat_chat_pop_back`.
    static let ic_creat_chat_pop_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_creat_chat_pop_back")
    /// Image `ic_creat_chat_tip`.
    static let ic_creat_chat_tip = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_creat_chat_tip")
    /// Image `ic_dynamic_info_small`.
    static let ic_dynamic_info_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dynamic_info_small")
    /// Image `ic_dynamic_send_small`.
    static let ic_dynamic_send_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dynamic_send_small")
    /// Image `ic_emjio_message`.
    static let ic_emjio_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_emjio_message")
    /// Image `ic_expenditure_record`.
    static let ic_expenditure_record = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_expenditure_record")
    /// Image `ic_friend_wish`.
    static let ic_friend_wish = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_friend_wish")
    /// Image `ic_give_gift`.
    static let ic_give_gift = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_give_gift")
    /// Image `ic_give_user_selected`.
    static let ic_give_user_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_give_user_selected")
    /// Image `ic_home_shang_qian_back`.
    static let ic_home_shang_qian_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_shang_qian_back")
    /// Image `ic_mask_back_vertical`.
    static let ic_mask_back_vertical = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mask_back_vertical")
    /// Image `ic_minimum_white`.
    static let ic_minimum_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_minimum_white")
    /// Image `ic_online_dot`.
    static let ic_online_dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_online_dot")
    /// Image `ic_play_icon_white`.
    static let ic_play_icon_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_play_icon_white")
    /// Image `ic_play_white_small`.
    static let ic_play_white_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_play_white_small")
    /// Image `ic_quit_white`.
    static let ic_quit_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_quit_white")
    /// Image `ic_red_envelope_campaign`.
    static let ic_red_envelope_campaign = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_red_envelope_campaign")
    /// Image `ic_right_arrow_white_4x7`.
    static let ic_right_arrow_white_4x7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_right_arrow_white_4x7")
    /// Image `ic_room_ appointment_button`.
    static let ic_room_Appointment_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_ appointment_button")
    /// Image `ic_room_ heart_white_small`.
    static let ic_room_Heart_white_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_ heart_white_small")
    /// Image `ic_room_ minimum`.
    static let ic_room_Minimum = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_ minimum")
    /// Image `ic_room_advance_button`.
    static let ic_room_advance_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_advance_button")
    /// Image `ic_room_advance_notice_popover`.
    static let ic_room_advance_notice_popover = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_advance_notice_popover")
    /// Image `ic_room_audience_arrow_gray`.
    static let ic_room_audience_arrow_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_audience_arrow_gray")
    /// Image `ic_room_emjio_normal`.
    static let ic_room_emjio_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_emjio_normal")
    /// Image `ic_room_honored_guest`.
    static let ic_room_honored_guest = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_honored_guest")
    /// Image `ic_room_more_menu_wallets`.
    static let ic_room_more_menu_wallets = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_more_menu_wallets")
    /// Image `ic_room_oneselft`.
    static let ic_room_oneselft = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_oneselft")
    /// Image `ic_room_open_wheat`.
    static let ic_room_open_wheat = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_open_wheat")
    /// Image `ic_room_popularity_ corners`.
    static let ic_room_popularity_Corners = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_popularity_ corners")
    /// Image `ic_room_popularity_awards`.
    static let ic_room_popularity_awards = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_popularity_awards")
    /// Image `ic_room_popularity_list_back`.
    static let ic_room_popularity_list_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_popularity_list_back")
    /// Image `ic_room_popularity_list_icon`.
    static let ic_room_popularity_list_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_popularity_list_icon")
    /// Image `ic_room_popularity_pk`.
    static let ic_room_popularity_pk = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_popularity_pk")
    /// Image `ic_room_seat_gift`.
    static let ic_room_seat_gift = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_seat_gift")
    /// Image `ic_room_small_floating_back`.
    static let ic_room_small_floating_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_small_floating_back")
    /// Image `ic_room_small_floating_play`.
    static let ic_room_small_floating_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_small_floating_play")
    /// Image `ic_room_time_white_small`.
    static let ic_room_time_white_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_time_white_small")
    /// Image `ic_room_whealth_gift_num_back`.
    static let ic_room_whealth_gift_num_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_room_whealth_gift_num_back")
    /// Image `ic_search_gray`.
    static let ic_search_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_gray")
    /// Image `ic_search_orange`.
    static let ic_search_orange = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_orange")
    /// Image `ic_selected_green`.
    static let ic_selected_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_selected_green")
    /// Image `ic_sheng_income`.
    static let ic_sheng_income = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sheng_income")
    /// Image `ic_voice_room_anchor`.
    static let ic_voice_room_anchor = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_voice_room_anchor")
    /// Image `ic_voice_room_compere`.
    static let ic_voice_room_compere = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_voice_room_compere")
    /// Image `ic_voice_room_pop_back`.
    static let ic_voice_room_pop_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_voice_room_pop_back")
    /// Image `ic_whealth_ranking_1`.
    static let ic_whealth_ranking_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_whealth_ranking_1")
    /// Image `ic_whealth_ranking_2`.
    static let ic_whealth_ranking_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_whealth_ranking_2")
    /// Image `ic_whealth_ranking_3`.
    static let ic_whealth_ranking_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_whealth_ranking_3")
    /// Image `ic_whealth_ranking_4`.
    static let ic_whealth_ranking_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_whealth_ranking_4")
    /// Image `live_loading`.
    static let live_loading = Rswift.ImageResource(bundle: R.hostingBundle, name: "live_loading")
    /// Image `load_fresh.gif`.
    static let load_freshGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "load_fresh.gif")
    /// Image `loading_circle`.
    static let loading_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading_circle")
    /// Image `location_icon`.
    static let location_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_icon")
    /// Image `login_QQ_btn`.
    static let login_QQ_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_QQ_btn")
    /// Image `login_account_apple`.
    static let login_account_apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_account_apple")
    /// Image `login_account_bg`.
    static let login_account_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_account_bg")
    /// Image `login_account_close`.
    static let login_account_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_account_close")
    /// Image `login_account_next_arrow`.
    static let login_account_next_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_account_next_arrow")
    /// Image `login_account_next_btn`.
    static let login_account_next_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_account_next_btn")
    /// Image `login_account_otherPhone`.
    static let login_account_otherPhone = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_account_otherPhone")
    /// Image `login_account_password`.
    static let login_account_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_account_password")
    /// Image `login_account_phone`.
    static let login_account_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_account_phone")
    /// Image `login_account_privacy_s`.
    static let login_account_privacy_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_account_privacy_s")
    /// Image `login_account_privacy`.
    static let login_account_privacy = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_account_privacy")
    /// Image `login_agree_btn_n`.
    static let login_agree_btn_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_agree_btn_n")
    /// Image `login_agree_btn_s`.
    static let login_agree_btn_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_agree_btn_s")
    /// Image `login_apple_btn`.
    static let login_apple_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_apple_btn")
    /// Image `login_bg`.
    static let login_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_bg")
    /// Image `login_binding_btnBg`.
    static let login_binding_btnBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_binding_btnBg")
    /// Image `login_cellphone_btn`.
    static let login_cellphone_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_cellphone_btn")
    /// Image `login_check_normal`.
    static let login_check_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_check_normal")
    /// Image `login_check_select`.
    static let login_check_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_check_select")
    /// Image `login_close`.
    static let login_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_close")
    /// Image `login_fullModel_btnBg_320`.
    static let login_fullModel_btnBg_320 = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_fullModel_btnBg_320")
    /// Image `login_fullModel_btnBg_375`.
    static let login_fullModel_btnBg_375 = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_fullModel_btnBg_375")
    /// Image `login_fullModel_btnBg_414`.
    static let login_fullModel_btnBg_414 = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_fullModel_btnBg_414")
    /// Image `login_popup_bg1`.
    static let login_popup_bg1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_popup_bg1")
    /// Image `login_popup_bg`.
    static let login_popup_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_popup_bg")
    /// Image `login_retrieve_password_next`.
    static let login_retrieve_password_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_retrieve_password_next")
    /// Image `login_weChat_btn`.
    static let login_weChat_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_weChat_btn")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `message_advertising`.
    static let message_advertising = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_advertising")
    /// Image `message_chat_gift`.
    static let message_chat_gift = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_chat_gift")
    /// Image `message_connect`.
    static let message_connect = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_connect")
    /// Image `message_emoji`.
    static let message_emoji = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_emoji")
    /// Image `message_gift`.
    static let message_gift = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_gift")
    /// Image `message_invite`.
    static let message_invite = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_invite")
    /// Image `message_menu`.
    static let message_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_menu")
    /// Image `message_microphone`.
    static let message_microphone = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_microphone")
    /// Image `message_notification`.
    static let message_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_notification")
    /// Image `message_phone`.
    static let message_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_phone")
    /// Image `message_praise`.
    static let message_praise = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_praise")
    /// Image `mine_QRCode_icon`.
    static let mine_QRCode_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_QRCode_icon")
    /// Image `mine_creat_room`.
    static let mine_creat_room = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_creat_room")
    /// Image `mine_introduce_icon`.
    static let mine_introduce_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_introduce_icon")
    /// Image `mine_lq_back`.
    static let mine_lq_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_lq_back")
    /// Image `mine_lq_comment`.
    static let mine_lq_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_lq_comment")
    /// Image `mine_lq_gift`.
    static let mine_lq_gift = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_lq_gift")
    /// Image `mine_lq_like_n`.
    static let mine_lq_like_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_lq_like_n")
    /// Image `mine_lq_like_s`.
    static let mine_lq_like_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_lq_like_s")
    /// Image `mine_lq_location`.
    static let mine_lq_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_lq_location")
    /// Image `mine_lq_share`.
    static let mine_lq_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_lq_share")
    /// Image `mine_menu`.
    static let mine_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_menu")
    /// Image `mine_nickName_revise`.
    static let mine_nickName_revise = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_nickName_revise")
    /// Image `mine_wallet_card`.
    static let mine_wallet_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_wallet_card")
    /// Image `mine_wallet_detail`.
    static let mine_wallet_detail = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_wallet_detail")
    /// Image `mine_wallet_identity`.
    static let mine_wallet_identity = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_wallet_identity")
    /// Image `mine_wallet_money`.
    static let mine_wallet_money = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_wallet_money")
    /// Image `nav_back_black`.
    static let nav_back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_back_black")
    /// Image `nav_back_white`.
    static let nav_back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_back_white")
    /// Image `networkE`.
    static let networkE = Rswift.ImageResource(bundle: R.hostingBundle, name: "networkE")
    /// Image `next_step_arrow`.
    static let next_step_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "next_step_arrow")
    /// Image `no_product`.
    static let no_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_product")
    /// Image `placeholder2`.
    static let placeholder2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder2")
    /// Image `placeholder3`.
    static let placeholder3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder3")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `refresh`.
    static let refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh")
    /// Image `releae_lq_play`.
    static let releae_lq_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "releae_lq_play")
    /// Image `release_addImage`.
    static let release_addImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_addImage")
    /// Image `release_add_friend`.
    static let release_add_friend = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_add_friend")
    /// Image `release_anew`.
    static let release_anew = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_anew")
    /// Image `release_back`.
    static let release_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_back")
    /// Image `release_bg2`.
    static let release_bg2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_bg2")
    /// Image `release_bg`.
    static let release_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_bg")
    /// Image `release_creat_dynamic`.
    static let release_creat_dynamic = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_creat_dynamic")
    /// Image `release_creat_room`.
    static let release_creat_room = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_creat_room")
    /// Image `release_deital_like_n`.
    static let release_deital_like_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_deital_like_n")
    /// Image `release_deital_like_s`.
    static let release_deital_like_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_deital_like_s")
    /// Image `release_delete`.
    static let release_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_delete")
    /// Image `release_detail_comment`.
    static let release_detail_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_detail_comment")
    /// Image `release_detail_gift`.
    static let release_detail_gift = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_detail_gift")
    /// Image `release_detail_shared`.
    static let release_detail_shared = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_detail_shared")
    /// Image `release_disc`.
    static let release_disc = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_disc")
    /// Image `release_location_black`.
    static let release_location_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_location_black")
    /// Image `release_location_orange`.
    static let release_location_orange = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_location_orange")
    /// Image `release_navi_back_white`.
    static let release_navi_back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_navi_back_white")
    /// Image `release_play_Icon`.
    static let release_play_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_play_Icon")
    /// Image `release_play`.
    static let release_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_play")
    /// Image `release_startPlay`.
    static let release_startPlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_startPlay")
    /// Image `release_start`.
    static let release_start = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_start")
    /// Image `release_transcribe`.
    static let release_transcribe = Rswift.ImageResource(bundle: R.hostingBundle, name: "release_transcribe")
    /// Image `room_ create_bg`.
    static let room_Create_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "room_ create_bg")
    /// Image `sex_boy_icon`.
    static let sex_boy_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "sex_boy_icon")
    /// Image `sex_boy`.
    static let sex_boy = Rswift.ImageResource(bundle: R.hostingBundle, name: "sex_boy")
    /// Image `sex_girl_icon`.
    static let sex_girl_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "sex_girl_icon")
    /// Image `sex_girl`.
    static let sex_girl = Rswift.ImageResource(bundle: R.hostingBundle, name: "sex_girl")
    /// Image `tab_center`.
    static let tab_center = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_center")
    /// Image `tab_chatCircles_s`.
    static let tab_chatCircles_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_chatCircles_s")
    /// Image `tab_chatCircles`.
    static let tab_chatCircles = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_chatCircles")
    /// Image `tab_chat_s`.
    static let tab_chat_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_chat_s")
    /// Image `tab_chat`.
    static let tab_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_chat")
    /// Image `tab_message_s`.
    static let tab_message_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_message_s")
    /// Image `tab_message`.
    static let tab_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_message")
    /// Image `tab_privateChat_s`.
    static let tab_privateChat_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_privateChat_s")
    /// Image `tab_privateChat`.
    static let tab_privateChat = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_privateChat")
    /// Image `tian_liao_load.gif`.
    static let tian_liao_loadGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "tian_liao_load.gif")
    /// Image `updateVersion`.
    static let updateVersion = Rswift.ImageResource(bundle: R.hostingBundle, name: "updateVersion")
    /// Image `user_inviteChatFriend_Icon`.
    static let user_inviteChatFriend_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_inviteChatFriend_Icon")
    /// Image `user_like_Icon`.
    static let user_like_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_like_Icon")
    /// Image `user_personInfo_Icon`.
    static let user_personInfo_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_personInfo_Icon")
    /// Image `user_personSet_Icon`.
    static let user_personSet_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_personSet_Icon")
    /// Image `user_person_Icon`.
    static let user_person_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_person_Icon")
    /// Image `user_wallet_Icon`.
    static let user_wallet_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_wallet_Icon")
    /// Image `voice_chat_ affiche`.
    static let voice_chat_Affiche = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_ affiche")
    /// Image `voice_chat_back`.
    static let voice_chat_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_back")
    /// Image `voice_chat_change_topic`.
    static let voice_chat_change_topic = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_change_topic")
    /// Image `voice_chat_close`.
    static let voice_chat_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_close")
    /// Image `voice_chat_emjio`.
    static let voice_chat_emjio = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_emjio")
    /// Image `voice_chat_give_ gifts`.
    static let voice_chat_give_Gifts = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_give_ gifts")
    /// Image `voice_chat_hot_field`.
    static let voice_chat_hot_field = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_hot_field")
    /// Image `voice_chat_more_menu`.
    static let voice_chat_more_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_more_menu")
    /// Image `voice_chat_new_user_wait`.
    static let voice_chat_new_user_wait = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_new_user_wait")
    /// Image `voice_chat_newcomer`.
    static let voice_chat_newcomer = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_newcomer")
    /// Image `voice_chat_room`.
    static let voice_chat_room = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_room")
    /// Image `voice_chat_send`.
    static let voice_chat_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_send")
    /// Image `voice_chat_wealth_small`.
    static let voice_chat_wealth_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_wealth_small")
    /// Image `voice_chat_wheat_close`.
    static let voice_chat_wheat_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_wheat_close")
    /// Image `voice_chat_wheat_open`.
    static let voice_chat_wheat_open = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_wheat_open")
    /// Image `voice_chat_wheat_state_off`.
    static let voice_chat_wheat_state_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_wheat_state_off")
    /// Image `voice_chat_wheat_state_open`.
    static let voice_chat_wheat_state_open = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_wheat_state_open")
    /// Image `voice_chat_wheat_wait`.
    static let voice_chat_wheat_wait = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_chat_wheat_wait")
    /// Image `voice_room_arrow_down_pink`.
    static let voice_room_arrow_down_pink = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_arrow_down_pink")
    /// Image `voice_room_change_back_img`.
    static let voice_room_change_back_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_change_back_img")
    /// Image `voice_room_change_emoticon`.
    static let voice_room_change_emoticon = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_change_emoticon")
    /// Image `voice_room_change_name`.
    static let voice_room_change_name = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_change_name")
    /// Image `voice_room_change_topic`.
    static let voice_room_change_topic = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_change_topic")
    /// Image `voice_room_emoji_amazed`.
    static let voice_room_emoji_amazed = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_emoji_amazed")
    /// Image `voice_room_emoji_applaud`.
    static let voice_room_emoji_applaud = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_emoji_applaud")
    /// Image `voice_room_emoji_loveliness`.
    static let voice_room_emoji_loveliness = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_emoji_loveliness")
    /// Image `voice_room_emoji_smile`.
    static let voice_room_emoji_smile = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_emoji_smile")
    /// Image `voice_room_housekeep`.
    static let voice_room_housekeep = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_housekeep")
    /// Image `voice_room_invit`.
    static let voice_room_invit = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_invit")
    /// Image `voice_room_load.gif`.
    static let voice_room_loadGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_load.gif")
    /// Image `voice_room_load_back`.
    static let voice_room_load_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_load_back")
    /// Image `voice_room_monye_small`.
    static let voice_room_monye_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_monye_small")
    /// Image `voice_room_report`.
    static let voice_room_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_report")
    /// Image `voice_room_setting`.
    static let voice_room_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_setting")
    /// Image `voice_room_silence_list`.
    static let voice_room_silence_list = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_silence_list")
    /// Image `voice_room_yellow_add`.
    static let voice_room_yellow_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "voice_room_yellow_add")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TL_BG", bundle: ..., traitCollection: ...)`
    static func tl_BG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tl_BG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "age_period_icon", bundle: ..., traitCollection: ...)`
    static func age_period_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.age_period_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_right_least_gray", bundle: ..., traitCollection: ...)`
    static func arrow_right_least_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_right_least_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_right_least_white", bundle: ..., traitCollection: ...)`
    static func arrow_right_least_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_right_least_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_right_small_gray", bundle: ..., traitCollection: ...)`
    static func arrow_right_small_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_right_small_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_right_small_white", bundle: ..., traitCollection: ...)`
    static func arrow_right_small_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_right_small_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart_check", bundle: ..., traitCollection: ...)`
    static func cart_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart_check_down", bundle: ..., traitCollection: ...)`
    static func cart_check_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart_check_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_to_bg_green", bundle: ..., traitCollection: ...)`
    static func chat_to_bg_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_to_bg_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_to_bg_red", bundle: ..., traitCollection: ...)`
    static func chat_to_bg_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_to_bg_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_to_bg_yellow", bundle: ..., traitCollection: ...)`
    static func chat_to_bg_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_to_bg_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "constellation_icon", bundle: ..., traitCollection: ...)`
    static func constellation_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.constellation_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "creat_chat_room_back", bundle: ..., traitCollection: ...)`
    static func creat_chat_room_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.creat_chat_room_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "friend_add", bundle: ..., traitCollection: ...)`
    static func friend_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friend_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "friend_fans", bundle: ..., traitCollection: ...)`
    static func friend_fans(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friend_fans, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "friend_follow", bundle: ..., traitCollection: ...)`
    static func friend_follow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friend_follow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "friend_footmark", bundle: ..., traitCollection: ...)`
    static func friend_footmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friend_footmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "friend_mutual", bundle: ..., traitCollection: ...)`
    static func friend_mutual(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friend_mutual, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "friend_serach_gray", bundle: ..., traitCollection: ...)`
    static func friend_serach_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friend_serach_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_allFollow_close", bundle: ..., traitCollection: ...)`
    static func home_allFollow_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_allFollow_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_arrow_black_down", bundle: ..., traitCollection: ...)`
    static func home_arrow_black_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_arrow_black_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_chat_add", bundle: ..., traitCollection: ...)`
    static func home_chat_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_chat_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_chat_detail", bundle: ..., traitCollection: ...)`
    static func home_chat_detail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_chat_detail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_chat_group_icon.gif", bundle: ..., traitCollection: ...)`
    static func home_chat_group_iconGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_chat_group_iconGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_chat_icon_white", bundle: ..., traitCollection: ...)`
    static func home_chat_icon_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_chat_icon_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_chat_number", bundle: ..., traitCollection: ...)`
    static func home_chat_number(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_chat_number, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_chat_redPacket", bundle: ..., traitCollection: ...)`
    static func home_chat_redPacket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_chat_redPacket, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_detail_privateChat", bundle: ..., traitCollection: ...)`
    static func home_detail_privateChat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_detail_privateChat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_navi_right_living", bundle: ..., traitCollection: ...)`
    static func home_navi_right_living(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_navi_right_living, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_online_icon", bundle: ..., traitCollection: ...)`
    static func home_online_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_online_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_pop_redView", bundle: ..., traitCollection: ...)`
    static func home_pop_redView(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_pop_redView, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_privateChat", bundle: ..., traitCollection: ...)`
    static func home_privateChat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_privateChat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_private_item_bg", bundle: ..., traitCollection: ...)`
    static func home_private_item_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_private_item_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_redBug_back", bundle: ..., traitCollection: ...)`
    static func home_redBug_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_redBug_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_redBug_coin", bundle: ..., traitCollection: ...)`
    static func home_redBug_coin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_redBug_coin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_redBug_red", bundle: ..., traitCollection: ...)`
    static func home_redBug_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_redBug_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_share_copy", bundle: ..., traitCollection: ...)`
    static func home_share_copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_share_copy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_share_delete", bundle: ..., traitCollection: ...)`
    static func home_share_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_share_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_share_dislike", bundle: ..., traitCollection: ...)`
    static func home_share_dislike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_share_dislike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_share_friendsCircle", bundle: ..., traitCollection: ...)`
    static func home_share_friendsCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_share_friendsCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_share_inform", bundle: ..., traitCollection: ...)`
    static func home_share_inform(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_share_inform, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_share_vxFriends", bundle: ..., traitCollection: ...)`
    static func home_share_vxFriends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_share_vxFriends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_blacklist", bundle: ..., traitCollection: ...)`
    static func ic_add_blacklist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_blacklist, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_affiche_back", bundle: ..., traitCollection: ...)`
    static func ic_affiche_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_affiche_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_billing_recharge", bundle: ..., traitCollection: ...)`
    static func ic_billing_recharge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_billing_recharge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_btn_back_ground_orange", bundle: ..., traitCollection: ...)`
    static func ic_btn_back_ground_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_btn_back_ground_orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cancel_small", bundle: ..., traitCollection: ...)`
    static func ic_cancel_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cancel_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_creat_chat_pop_back", bundle: ..., traitCollection: ...)`
    static func ic_creat_chat_pop_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_creat_chat_pop_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_creat_chat_tip", bundle: ..., traitCollection: ...)`
    static func ic_creat_chat_tip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_creat_chat_tip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_dynamic_info_small", bundle: ..., traitCollection: ...)`
    static func ic_dynamic_info_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dynamic_info_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_dynamic_send_small", bundle: ..., traitCollection: ...)`
    static func ic_dynamic_send_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dynamic_send_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_emjio_message", bundle: ..., traitCollection: ...)`
    static func ic_emjio_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_emjio_message, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_expenditure_record", bundle: ..., traitCollection: ...)`
    static func ic_expenditure_record(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_expenditure_record, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_friend_wish", bundle: ..., traitCollection: ...)`
    static func ic_friend_wish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_friend_wish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_give_gift", bundle: ..., traitCollection: ...)`
    static func ic_give_gift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_give_gift, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_give_user_selected", bundle: ..., traitCollection: ...)`
    static func ic_give_user_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_give_user_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home_shang_qian_back", bundle: ..., traitCollection: ...)`
    static func ic_home_shang_qian_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_shang_qian_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mask_back_vertical", bundle: ..., traitCollection: ...)`
    static func ic_mask_back_vertical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mask_back_vertical, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_minimum_white", bundle: ..., traitCollection: ...)`
    static func ic_minimum_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_minimum_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_online_dot", bundle: ..., traitCollection: ...)`
    static func ic_online_dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_online_dot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_play_icon_white", bundle: ..., traitCollection: ...)`
    static func ic_play_icon_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_play_icon_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_play_white_small", bundle: ..., traitCollection: ...)`
    static func ic_play_white_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_play_white_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_quit_white", bundle: ..., traitCollection: ...)`
    static func ic_quit_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_quit_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_red_envelope_campaign", bundle: ..., traitCollection: ...)`
    static func ic_red_envelope_campaign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_red_envelope_campaign, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_right_arrow_white_4x7", bundle: ..., traitCollection: ...)`
    static func ic_right_arrow_white_4x7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_right_arrow_white_4x7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_ appointment_button", bundle: ..., traitCollection: ...)`
    static func ic_room_Appointment_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_Appointment_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_ heart_white_small", bundle: ..., traitCollection: ...)`
    static func ic_room_Heart_white_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_Heart_white_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_ minimum", bundle: ..., traitCollection: ...)`
    static func ic_room_Minimum(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_Minimum, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_advance_button", bundle: ..., traitCollection: ...)`
    static func ic_room_advance_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_advance_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_advance_notice_popover", bundle: ..., traitCollection: ...)`
    static func ic_room_advance_notice_popover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_advance_notice_popover, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_audience_arrow_gray", bundle: ..., traitCollection: ...)`
    static func ic_room_audience_arrow_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_audience_arrow_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_emjio_normal", bundle: ..., traitCollection: ...)`
    static func ic_room_emjio_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_emjio_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_honored_guest", bundle: ..., traitCollection: ...)`
    static func ic_room_honored_guest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_honored_guest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_more_menu_wallets", bundle: ..., traitCollection: ...)`
    static func ic_room_more_menu_wallets(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_more_menu_wallets, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_oneselft", bundle: ..., traitCollection: ...)`
    static func ic_room_oneselft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_oneselft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_open_wheat", bundle: ..., traitCollection: ...)`
    static func ic_room_open_wheat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_open_wheat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_popularity_ corners", bundle: ..., traitCollection: ...)`
    static func ic_room_popularity_Corners(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_popularity_Corners, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_popularity_awards", bundle: ..., traitCollection: ...)`
    static func ic_room_popularity_awards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_popularity_awards, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_popularity_list_back", bundle: ..., traitCollection: ...)`
    static func ic_room_popularity_list_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_popularity_list_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_popularity_list_icon", bundle: ..., traitCollection: ...)`
    static func ic_room_popularity_list_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_popularity_list_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_popularity_pk", bundle: ..., traitCollection: ...)`
    static func ic_room_popularity_pk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_popularity_pk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_seat_gift", bundle: ..., traitCollection: ...)`
    static func ic_room_seat_gift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_seat_gift, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_small_floating_back", bundle: ..., traitCollection: ...)`
    static func ic_room_small_floating_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_small_floating_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_small_floating_play", bundle: ..., traitCollection: ...)`
    static func ic_room_small_floating_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_small_floating_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_time_white_small", bundle: ..., traitCollection: ...)`
    static func ic_room_time_white_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_time_white_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_room_whealth_gift_num_back", bundle: ..., traitCollection: ...)`
    static func ic_room_whealth_gift_num_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_room_whealth_gift_num_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_gray", bundle: ..., traitCollection: ...)`
    static func ic_search_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_orange", bundle: ..., traitCollection: ...)`
    static func ic_search_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_selected_green", bundle: ..., traitCollection: ...)`
    static func ic_selected_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_selected_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sheng_income", bundle: ..., traitCollection: ...)`
    static func ic_sheng_income(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sheng_income, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_voice_room_anchor", bundle: ..., traitCollection: ...)`
    static func ic_voice_room_anchor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_voice_room_anchor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_voice_room_compere", bundle: ..., traitCollection: ...)`
    static func ic_voice_room_compere(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_voice_room_compere, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_voice_room_pop_back", bundle: ..., traitCollection: ...)`
    static func ic_voice_room_pop_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_voice_room_pop_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_whealth_ranking_1", bundle: ..., traitCollection: ...)`
    static func ic_whealth_ranking_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_whealth_ranking_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_whealth_ranking_2", bundle: ..., traitCollection: ...)`
    static func ic_whealth_ranking_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_whealth_ranking_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_whealth_ranking_3", bundle: ..., traitCollection: ...)`
    static func ic_whealth_ranking_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_whealth_ranking_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_whealth_ranking_4", bundle: ..., traitCollection: ...)`
    static func ic_whealth_ranking_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_whealth_ranking_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "live_loading", bundle: ..., traitCollection: ...)`
    static func live_loading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.live_loading, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "load_fresh.gif", bundle: ..., traitCollection: ...)`
    static func load_freshGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.load_freshGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loading_circle", bundle: ..., traitCollection: ...)`
    static func loading_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loading_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_icon", bundle: ..., traitCollection: ...)`
    static func location_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_QQ_btn", bundle: ..., traitCollection: ...)`
    static func login_QQ_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_QQ_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_account_apple", bundle: ..., traitCollection: ...)`
    static func login_account_apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_account_apple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_account_bg", bundle: ..., traitCollection: ...)`
    static func login_account_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_account_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_account_close", bundle: ..., traitCollection: ...)`
    static func login_account_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_account_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_account_next_arrow", bundle: ..., traitCollection: ...)`
    static func login_account_next_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_account_next_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_account_next_btn", bundle: ..., traitCollection: ...)`
    static func login_account_next_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_account_next_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_account_otherPhone", bundle: ..., traitCollection: ...)`
    static func login_account_otherPhone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_account_otherPhone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_account_password", bundle: ..., traitCollection: ...)`
    static func login_account_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_account_password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_account_phone", bundle: ..., traitCollection: ...)`
    static func login_account_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_account_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_account_privacy", bundle: ..., traitCollection: ...)`
    static func login_account_privacy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_account_privacy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_account_privacy_s", bundle: ..., traitCollection: ...)`
    static func login_account_privacy_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_account_privacy_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_agree_btn_n", bundle: ..., traitCollection: ...)`
    static func login_agree_btn_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_agree_btn_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_agree_btn_s", bundle: ..., traitCollection: ...)`
    static func login_agree_btn_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_agree_btn_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_apple_btn", bundle: ..., traitCollection: ...)`
    static func login_apple_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_apple_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_bg", bundle: ..., traitCollection: ...)`
    static func login_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_binding_btnBg", bundle: ..., traitCollection: ...)`
    static func login_binding_btnBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_binding_btnBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_cellphone_btn", bundle: ..., traitCollection: ...)`
    static func login_cellphone_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_cellphone_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_check_normal", bundle: ..., traitCollection: ...)`
    static func login_check_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_check_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_check_select", bundle: ..., traitCollection: ...)`
    static func login_check_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_check_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_close", bundle: ..., traitCollection: ...)`
    static func login_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_fullModel_btnBg_320", bundle: ..., traitCollection: ...)`
    static func login_fullModel_btnBg_320(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_fullModel_btnBg_320, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_fullModel_btnBg_375", bundle: ..., traitCollection: ...)`
    static func login_fullModel_btnBg_375(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_fullModel_btnBg_375, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_fullModel_btnBg_414", bundle: ..., traitCollection: ...)`
    static func login_fullModel_btnBg_414(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_fullModel_btnBg_414, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_popup_bg", bundle: ..., traitCollection: ...)`
    static func login_popup_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_popup_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_popup_bg1", bundle: ..., traitCollection: ...)`
    static func login_popup_bg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_popup_bg1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_retrieve_password_next", bundle: ..., traitCollection: ...)`
    static func login_retrieve_password_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_retrieve_password_next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_weChat_btn", bundle: ..., traitCollection: ...)`
    static func login_weChat_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_weChat_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_advertising", bundle: ..., traitCollection: ...)`
    static func message_advertising(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_advertising, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_chat_gift", bundle: ..., traitCollection: ...)`
    static func message_chat_gift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_chat_gift, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_connect", bundle: ..., traitCollection: ...)`
    static func message_connect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_connect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_emoji", bundle: ..., traitCollection: ...)`
    static func message_emoji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_emoji, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_gift", bundle: ..., traitCollection: ...)`
    static func message_gift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_gift, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_invite", bundle: ..., traitCollection: ...)`
    static func message_invite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_invite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_menu", bundle: ..., traitCollection: ...)`
    static func message_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_microphone", bundle: ..., traitCollection: ...)`
    static func message_microphone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_microphone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_notification", bundle: ..., traitCollection: ...)`
    static func message_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_phone", bundle: ..., traitCollection: ...)`
    static func message_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_praise", bundle: ..., traitCollection: ...)`
    static func message_praise(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_praise, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_QRCode_icon", bundle: ..., traitCollection: ...)`
    static func mine_QRCode_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_QRCode_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_creat_room", bundle: ..., traitCollection: ...)`
    static func mine_creat_room(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_creat_room, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_introduce_icon", bundle: ..., traitCollection: ...)`
    static func mine_introduce_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_introduce_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_lq_back", bundle: ..., traitCollection: ...)`
    static func mine_lq_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_lq_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_lq_comment", bundle: ..., traitCollection: ...)`
    static func mine_lq_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_lq_comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_lq_gift", bundle: ..., traitCollection: ...)`
    static func mine_lq_gift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_lq_gift, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_lq_like_n", bundle: ..., traitCollection: ...)`
    static func mine_lq_like_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_lq_like_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_lq_like_s", bundle: ..., traitCollection: ...)`
    static func mine_lq_like_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_lq_like_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_lq_location", bundle: ..., traitCollection: ...)`
    static func mine_lq_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_lq_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_lq_share", bundle: ..., traitCollection: ...)`
    static func mine_lq_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_lq_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_menu", bundle: ..., traitCollection: ...)`
    static func mine_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_nickName_revise", bundle: ..., traitCollection: ...)`
    static func mine_nickName_revise(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_nickName_revise, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_wallet_card", bundle: ..., traitCollection: ...)`
    static func mine_wallet_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_wallet_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_wallet_detail", bundle: ..., traitCollection: ...)`
    static func mine_wallet_detail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_wallet_detail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_wallet_identity", bundle: ..., traitCollection: ...)`
    static func mine_wallet_identity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_wallet_identity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_wallet_money", bundle: ..., traitCollection: ...)`
    static func mine_wallet_money(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_wallet_money, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_back_black", bundle: ..., traitCollection: ...)`
    static func nav_back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_back_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nav_back_white", bundle: ..., traitCollection: ...)`
    static func nav_back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_back_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "networkE", bundle: ..., traitCollection: ...)`
    static func networkE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.networkE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "next_step_arrow", bundle: ..., traitCollection: ...)`
    static func next_step_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next_step_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_product", bundle: ..., traitCollection: ...)`
    static func no_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_product, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder2", bundle: ..., traitCollection: ...)`
    static func placeholder2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder3", bundle: ..., traitCollection: ...)`
    static func placeholder3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh", bundle: ..., traitCollection: ...)`
    static func refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "releae_lq_play", bundle: ..., traitCollection: ...)`
    static func releae_lq_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.releae_lq_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_addImage", bundle: ..., traitCollection: ...)`
    static func release_addImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_addImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_add_friend", bundle: ..., traitCollection: ...)`
    static func release_add_friend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_add_friend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_anew", bundle: ..., traitCollection: ...)`
    static func release_anew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_anew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_back", bundle: ..., traitCollection: ...)`
    static func release_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_bg", bundle: ..., traitCollection: ...)`
    static func release_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_bg2", bundle: ..., traitCollection: ...)`
    static func release_bg2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_bg2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_creat_dynamic", bundle: ..., traitCollection: ...)`
    static func release_creat_dynamic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_creat_dynamic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_creat_room", bundle: ..., traitCollection: ...)`
    static func release_creat_room(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_creat_room, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_deital_like_n", bundle: ..., traitCollection: ...)`
    static func release_deital_like_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_deital_like_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_deital_like_s", bundle: ..., traitCollection: ...)`
    static func release_deital_like_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_deital_like_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_delete", bundle: ..., traitCollection: ...)`
    static func release_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_detail_comment", bundle: ..., traitCollection: ...)`
    static func release_detail_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_detail_comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_detail_gift", bundle: ..., traitCollection: ...)`
    static func release_detail_gift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_detail_gift, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_detail_shared", bundle: ..., traitCollection: ...)`
    static func release_detail_shared(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_detail_shared, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_disc", bundle: ..., traitCollection: ...)`
    static func release_disc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_disc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_location_black", bundle: ..., traitCollection: ...)`
    static func release_location_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_location_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_location_orange", bundle: ..., traitCollection: ...)`
    static func release_location_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_location_orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_navi_back_white", bundle: ..., traitCollection: ...)`
    static func release_navi_back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_navi_back_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_play", bundle: ..., traitCollection: ...)`
    static func release_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_play_Icon", bundle: ..., traitCollection: ...)`
    static func release_play_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_play_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_start", bundle: ..., traitCollection: ...)`
    static func release_start(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_start, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_startPlay", bundle: ..., traitCollection: ...)`
    static func release_startPlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_startPlay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "release_transcribe", bundle: ..., traitCollection: ...)`
    static func release_transcribe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.release_transcribe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "room_ create_bg", bundle: ..., traitCollection: ...)`
    static func room_Create_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.room_Create_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sex_boy", bundle: ..., traitCollection: ...)`
    static func sex_boy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sex_boy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sex_boy_icon", bundle: ..., traitCollection: ...)`
    static func sex_boy_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sex_boy_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sex_girl", bundle: ..., traitCollection: ...)`
    static func sex_girl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sex_girl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sex_girl_icon", bundle: ..., traitCollection: ...)`
    static func sex_girl_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sex_girl_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_center", bundle: ..., traitCollection: ...)`
    static func tab_center(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_center, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_chat", bundle: ..., traitCollection: ...)`
    static func tab_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_chatCircles", bundle: ..., traitCollection: ...)`
    static func tab_chatCircles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_chatCircles, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_chatCircles_s", bundle: ..., traitCollection: ...)`
    static func tab_chatCircles_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_chatCircles_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_chat_s", bundle: ..., traitCollection: ...)`
    static func tab_chat_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_chat_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_message", bundle: ..., traitCollection: ...)`
    static func tab_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_message, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_message_s", bundle: ..., traitCollection: ...)`
    static func tab_message_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_message_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_privateChat", bundle: ..., traitCollection: ...)`
    static func tab_privateChat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_privateChat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_privateChat_s", bundle: ..., traitCollection: ...)`
    static func tab_privateChat_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_privateChat_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tian_liao_load.gif", bundle: ..., traitCollection: ...)`
    static func tian_liao_loadGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tian_liao_loadGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "updateVersion", bundle: ..., traitCollection: ...)`
    static func updateVersion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.updateVersion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_inviteChatFriend_Icon", bundle: ..., traitCollection: ...)`
    static func user_inviteChatFriend_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_inviteChatFriend_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_like_Icon", bundle: ..., traitCollection: ...)`
    static func user_like_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_like_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_personInfo_Icon", bundle: ..., traitCollection: ...)`
    static func user_personInfo_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_personInfo_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_personSet_Icon", bundle: ..., traitCollection: ...)`
    static func user_personSet_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_personSet_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_person_Icon", bundle: ..., traitCollection: ...)`
    static func user_person_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_person_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_wallet_Icon", bundle: ..., traitCollection: ...)`
    static func user_wallet_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_wallet_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_ affiche", bundle: ..., traitCollection: ...)`
    static func voice_chat_Affiche(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_Affiche, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_back", bundle: ..., traitCollection: ...)`
    static func voice_chat_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_change_topic", bundle: ..., traitCollection: ...)`
    static func voice_chat_change_topic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_change_topic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_close", bundle: ..., traitCollection: ...)`
    static func voice_chat_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_emjio", bundle: ..., traitCollection: ...)`
    static func voice_chat_emjio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_emjio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_give_ gifts", bundle: ..., traitCollection: ...)`
    static func voice_chat_give_Gifts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_give_Gifts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_hot_field", bundle: ..., traitCollection: ...)`
    static func voice_chat_hot_field(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_hot_field, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_more_menu", bundle: ..., traitCollection: ...)`
    static func voice_chat_more_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_more_menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_new_user_wait", bundle: ..., traitCollection: ...)`
    static func voice_chat_new_user_wait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_new_user_wait, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_newcomer", bundle: ..., traitCollection: ...)`
    static func voice_chat_newcomer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_newcomer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_room", bundle: ..., traitCollection: ...)`
    static func voice_chat_room(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_room, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_send", bundle: ..., traitCollection: ...)`
    static func voice_chat_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_wealth_small", bundle: ..., traitCollection: ...)`
    static func voice_chat_wealth_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_wealth_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_wheat_close", bundle: ..., traitCollection: ...)`
    static func voice_chat_wheat_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_wheat_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_wheat_open", bundle: ..., traitCollection: ...)`
    static func voice_chat_wheat_open(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_wheat_open, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_wheat_state_off", bundle: ..., traitCollection: ...)`
    static func voice_chat_wheat_state_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_wheat_state_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_wheat_state_open", bundle: ..., traitCollection: ...)`
    static func voice_chat_wheat_state_open(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_wheat_state_open, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_chat_wheat_wait", bundle: ..., traitCollection: ...)`
    static func voice_chat_wheat_wait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_chat_wheat_wait, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_arrow_down_pink", bundle: ..., traitCollection: ...)`
    static func voice_room_arrow_down_pink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_arrow_down_pink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_change_back_img", bundle: ..., traitCollection: ...)`
    static func voice_room_change_back_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_change_back_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_change_emoticon", bundle: ..., traitCollection: ...)`
    static func voice_room_change_emoticon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_change_emoticon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_change_name", bundle: ..., traitCollection: ...)`
    static func voice_room_change_name(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_change_name, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_change_topic", bundle: ..., traitCollection: ...)`
    static func voice_room_change_topic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_change_topic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_emoji_amazed", bundle: ..., traitCollection: ...)`
    static func voice_room_emoji_amazed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_emoji_amazed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_emoji_applaud", bundle: ..., traitCollection: ...)`
    static func voice_room_emoji_applaud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_emoji_applaud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_emoji_loveliness", bundle: ..., traitCollection: ...)`
    static func voice_room_emoji_loveliness(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_emoji_loveliness, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_emoji_smile", bundle: ..., traitCollection: ...)`
    static func voice_room_emoji_smile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_emoji_smile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_housekeep", bundle: ..., traitCollection: ...)`
    static func voice_room_housekeep(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_housekeep, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_invit", bundle: ..., traitCollection: ...)`
    static func voice_room_invit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_invit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_load.gif", bundle: ..., traitCollection: ...)`
    static func voice_room_loadGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_loadGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_load_back", bundle: ..., traitCollection: ...)`
    static func voice_room_load_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_load_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_monye_small", bundle: ..., traitCollection: ...)`
    static func voice_room_monye_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_monye_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_report", bundle: ..., traitCollection: ...)`
    static func voice_room_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_report, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_setting", bundle: ..., traitCollection: ...)`
    static func voice_room_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_silence_list", bundle: ..., traitCollection: ...)`
    static func voice_room_silence_list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_silence_list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voice_room_yellow_add", bundle: ..., traitCollection: ...)`
    static func voice_room_yellow_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voice_room_yellow_add, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "TL_BG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TL_BG' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
